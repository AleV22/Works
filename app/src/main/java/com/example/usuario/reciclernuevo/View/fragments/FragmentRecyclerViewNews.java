package com.example.usuario.reciclernuevo.View.fragments;import android.content.Context;import android.graphics.drawable.Drawable;import android.os.Bundle;import android.support.v4.app.Fragment;import android.support.v4.content.ContextCompat;import android.support.v4.widget.SwipeRefreshLayout;import android.support.v7.widget.DividerItemDecoration;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import com.example.usuario.reciclernuevo.Controller.ControllerNews;import com.example.usuario.reciclernuevo.Model.POJO.News;import com.example.usuario.reciclernuevo.R;import com.example.usuario.reciclernuevo.View.adapters.AdapterRecycler;import com.example.usuario.reciclernuevo.util.ResultListener;import java.util.ArrayList;import java.util.List;public class FragmentRecyclerViewNews extends Fragment implements AdapterRecycler.Favoriteable {    public static final String KEY_SORTEDBY = "keysortedBy";    public static final String CATEGORIASELECCIONADA = "categoria";    public static final String LOGGEDUSER = "loggedUser";    private String categoriaSeleccionada;    private String source;    private String sortedBy;    private AdapterRecycler miAdapterRecycler;    private NotifyActivities notifyActivities;    private List<News> listaNews;    private RecyclerView recyclerView;    private ControllerNews controllerNews;    private SwipeRefreshLayout swipeRefreshLayout;    //Factory for ViewPager    public static FragmentRecyclerViewNews RecyclerFragmentFactory(String sortedBy, String categoriaSeleccionada){        Bundle bundle = new Bundle();        bundle.putString(KEY_SORTEDBY , sortedBy);        bundle.putString(CATEGORIASELECCIONADA, categoriaSeleccionada);        FragmentRecyclerViewNews fragmentRecyclerViewNews = new FragmentRecyclerViewNews();        fragmentRecyclerViewNews.setArguments(bundle);        return fragmentRecyclerViewNews;    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        if (getArguments() != null) {            sortedBy = getArguments().getString(KEY_SORTEDBY);        }    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        View view =inflater.inflate(R.layout.vista, container, false);        listaNews = new ArrayList<>();        Bundle bundle = getArguments();        categoriaSeleccionada = bundle.getString(CATEGORIASELECCIONADA);        sortedBy = bundle.getString(KEY_SORTEDBY);        miAdapterRecycler = new AdapterRecycler(listaNews, getContext(), this);        swipeRefreshLayout = (SwipeRefreshLayout) view.findViewById(R.id.swipeRefresh);        swipeRefreshLayout.setColorSchemeColors(getResources().getColor(R.color.colorPrimary));        swipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {            @Override            public void onRefresh() {                loadControllerNews();            }        });        //source chooses the channel        source = filterSelection();        controllerNews = new ControllerNews();        loadControllerNews();        recyclerView = (RecyclerView) view.findViewById(R.id.recyclerDelMain);        RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(getContext(), LinearLayoutManager.VERTICAL,false);        recyclerView.setLayoutManager(layoutManager);        dividerCode();        recyclerView.setAdapter(miAdapterRecycler);        recyclerView.setHasFixedSize(true);        recyclerView.setDrawingCacheEnabled(true);        recyclerView.setDrawingCacheQuality(View.DRAWING_CACHE_QUALITY_HIGH);        View.OnClickListener listener = new View.OnClickListener() {            @Override            public void onClick(View view) {                Integer position = recyclerView.getChildAdapterPosition(view);                notifyActivities.receiveMessaje(position,sortedBy,source);            }        };        miAdapterRecycler.setListener(listener);        return view;    }    //Code for the division between news    public void dividerCode() {        DividerItemDecoration horizontalDecoration = new DividerItemDecoration(recyclerView.getContext(),                DividerItemDecoration.VERTICAL);        Drawable horizontalDivider = ContextCompat.getDrawable(getActivity(), R.drawable.horizontal_divider);        horizontalDecoration.setDrawable(horizontalDivider);        recyclerView.addItemDecoration(horizontalDecoration);    }    @Override    public void setFavorito() {        notifyActivities.setFavorito();    }    public interface NotifyActivities {        public void receiveMessaje(Integer position, String sortedBy, String source);        public void setFavorito();    }    @Override    public void onAttach(Context context) {        super.onAttach(context);        this.notifyActivities = (NotifyActivities) context;    }    @Override    public void setFavorito2(News news) {    }    //Filter indicator    public String filterSelection() {        if (categoriaSeleccionada == null) {            return "fortune";        } else {            return categoriaSeleccionada.toLowerCase();        }    }    public void loadControllerNews(){        controllerNews.obtenerNews(getContext(), new ResultListener<List<News>>() {            @Override            public void finish(List<News> resultado) {                listaNews = resultado;                miAdapterRecycler.setListaNews(listaNews);                miAdapterRecycler.notifyDataSetChanged();                swipeRefreshLayout.setRefreshing(false);            }        }, categoriaSeleccionada, sortedBy);    }}