package com.example.usuario.reciclernuevo.Model.DAO;import android.content.ContentValues;import android.content.Context;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import com.example.usuario.reciclernuevo.Model.POJO.News;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import java.util.ArrayList;import java.util.List;//esto es mi tablapublic class DAONewsDatabase extends DatabaseHelper {    public static final String TABLE_TITULO = "news";    public static final String TITULO = "titulo";    public static final String AUTHOR = "author";    public static final String PHOTO = "photo";    public static final String DESCRIPCION = "descripcion";    public static final String URL = "url";    public static final String CHANNEL = "channel";    public static final String FAVORITED = "favorited";    public static final String PUBLISHEDAT = "publishedAt";    public DAONewsDatabase(Context context) {        super(context);    }    public void addNews(News news) {        if (!isNewsInDB(news.getUrl())) {            SQLiteDatabase database = getWritableDatabase();            ContentValues values = new ContentValues();            values.put(TITULO, news.getTitulo());            values.put(AUTHOR, news.getAuthor());            values.put(DESCRIPCION, news.getDescripcion());            values.put(PHOTO, news.getImagen());            values.put(URL, news.getUrl());            values.put(CHANNEL, news.getChannel());            values.put(FAVORITED, news.getFavorited());            values.put(PUBLISHEDAT, news.getPublishedAt());            database.insert(TABLE_TITULO, null, values);            //cerramos la base de datos            database.close();        }    }    public void addNewsList(List<News> listaDeNews) {        for (News news : listaDeNews) {            news.setFavorited(false);            addNews(news);        }    }    public Boolean isNewsInDB(String url) {        SQLiteDatabase database = getReadableDatabase();        String query = "SELECT " + URL +                " FROM " + TABLE_TITULO +                " WHERE " + URL + " = " + "'" + url + "'";        Cursor cursor = database.rawQuery(query, null);        Boolean isNews = cursor.moveToNext();        cursor.close();        database.close();        return isNews;    }    public Boolean isFavoriteInDB(String url) {        SQLiteDatabase database = getReadableDatabase();        String query = "SELECT " + URL +                " FROM " + TABLE_TITULO +                " WHERE " + URL + " = "  + "'" + url + "'" + " AND " + FAVORITED + " = " + 1;        Cursor cursor = database.rawQuery(query, null);        Boolean isNews = cursor.moveToNext();        cursor.close();        database.close();        return isNews;    }    public void toggleIsFavoritedInDB(News news) {        SQLiteDatabase database = getReadableDatabase();        ContentValues cv = new ContentValues();        cv.put(FAVORITED, sQLBooleanToInteger(news.getFavorited()));        database.update(TABLE_TITULO, cv, URL + " = " + "'" + news.getUrl() + "'", null );        database.close();        if (news.getPublishedAt() != null && news.getFavorited()) {            addFavToFirebase(news);        } else {            removeFavToFirebase(news);        }    }    private void addFavToFirebase(News news){        FirebaseDatabase database = FirebaseDatabase.getInstance();        DatabaseReference myRef = database.getReference();        myRef.child(FirebaseAuth.getInstance().getCurrentUser().getUid()).child("newsFavoritas").child(news.getPublishedAt()).setValue(news);    }    private void removeFavToFirebase(News news){        FirebaseDatabase database = FirebaseDatabase.getInstance();        DatabaseReference myRef = database.getReference();        myRef.child(FirebaseAuth.getInstance().getCurrentUser().getUid()).child("newsFavoritas").child(news.getPublishedAt()).removeValue();    }    public List<News> getListNewsInDatabase() {        List<News> listNews = new ArrayList<>();        SQLiteDatabase database = getReadableDatabase();        String query = "SELECT * FROM " + TABLE_TITULO;        Cursor cursor = database.rawQuery(query, null);        while (cursor.moveToNext()) {            String titulo = cursor.getString(cursor.getColumnIndex(TITULO));            String author = cursor.getString(cursor.getColumnIndex(AUTHOR));            String descripcion = cursor.getString(cursor.getColumnIndex(DESCRIPCION));            String photo = cursor.getString(cursor.getColumnIndex(PHOTO));            String url = cursor.getString(cursor.getColumnIndex(URL));            String channel = cursor.getString(cursor.getColumnIndex(CHANNEL));            Integer favorited = cursor.getInt(cursor.getColumnIndex(FAVORITED));            String publishedAt = cursor.getString(cursor.getColumnIndex(PUBLISHEDAT));            News news = new News(titulo, author, descripcion, photo, channel, url, sQLIntegerToBoolean(favorited), publishedAt);            listNews.add(news);        }        cursor.close();        database.close();        return listNews;    }    public List<News> getListNewsFavoritedInDatabase() {        List<News> listNews = new ArrayList<>();        SQLiteDatabase database = getReadableDatabase();        String query = "SELECT * FROM " + TABLE_TITULO +                " WHERE " + FAVORITED + " = " + 1;        Cursor cursor = database.rawQuery(query, null);        while (cursor.moveToNext()) {            String titulo = cursor.getString(cursor.getColumnIndex(TITULO));            String author = cursor.getString(cursor.getColumnIndex(AUTHOR));            String descripcion = cursor.getString(cursor.getColumnIndex(DESCRIPCION));            String photo = cursor.getString(cursor.getColumnIndex(PHOTO));            String url = cursor.getString(cursor.getColumnIndex(URL));            String channel = cursor.getString(cursor.getColumnIndex(CHANNEL));            Integer favorited = cursor.getInt(cursor.getColumnIndex(FAVORITED));            String publishedAt = cursor.getString(cursor.getColumnIndex(PUBLISHEDAT));            News news = new News(titulo, author, descripcion, photo, channel, url, sQLIntegerToBoolean(favorited), publishedAt);            listNews.add(news);        }        cursor.close();        database.close();        return listNews;    }    //translator for SQL Integers    public Integer sQLBooleanToInteger(Boolean bool) {        if (bool == false) {            return 0;        } else {            return 1;        }    }    //translator for SQL Booleans    public Boolean sQLIntegerToBoolean(Integer integer) {        if (integer == 1) {            return true;        } else {            return false;        }    }    public void obtenerNewsDeDB(){    }}